name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} @ Go ${{ matrix.go }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.23.x', '1.24.x']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Ensure Vue example project is initialized (if needed)
    - name: Initialize Vue example project (if script exists)
      run: |
        if [ -f example/init-vue-example.sh ]; then
          cd example
          chmod +x init-vue-example.sh
          ./init-vue-example.sh
        fi
      shell: bash

    - name: Install npm dependencies for Vue example
      run: |
        cd example/vue-example
        npm install

    - name: List example/vue-example contents for debug
      run: ls -alR example/vue-example

    - name: Build
      run: go build -v ./...

    # Linux and macOS test step
    - name: Test with coverage (Unix)
      if: runner.os != 'Windows'
      run: |
        go test -v -coverprofile=coverage.out  ./...

    # Windows test step (separate to handle PowerShell issues)
    - name: Test with coverage (Windows)
      if: runner.os == 'Windows'
      run: |
        go test -v -coverprofile=coverage.out  ./...
      shell: cmd

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5.4.3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./coverage.out
        flags: ${{ matrix.os }}-go${{ matrix.go }}
        name: codecov-${{ matrix.os }}-go${{ matrix.go }}
        fail_ci_if_error: true
        verbose: true